class Constants {

    static final String MASTER_BRANCH = 'master'

    static final String QA_BUILD = 'Debug'
    static final String RELEASE_BUILD = 'Release'

    static final String INTERNAL_TRACK = 'internal'
    static final String RELEASE_TRACK = 'release'
}

def getBuildType() {
    switch (env.BRANCH_NAME) {
        case Constants.MASTER_BRANCH:
            return Constants.RELEASE_BUILD
        default:
            return Constants.QA_BUILD
    }
}

def getTrackType() {
    switch (env.BRANCH_NAME) {
        case Constants.MASTER_BRANCH:
            return Constants.RELEASE_TRACK
        default:
            return Constants.INTERNAL_TRACK
    }
}

def isDeployCandidate() {
    return ("${env.BRANCH_NAME}" =~ /(isak|master)/)
}

pipeline {
    // agent { dockerfile true }
    agent any
    tools {
        gradle 'gradle-7.6'
    }
    environment {
        appName = 'MaryFarm'

        KEY_PASSWORD = credentials('keypass')
        KEY_ALIAS = credentials('keyAlias')
        KEYSTORE = credentials('keystore')
        STORE_PASSWORD = credentials('keypass')
    }
    stages {
        // stage('Privileges'){
        //     steps{
        //         sh "chmod +x -R ${env.WORKSPACE}"
        //     }
        // }
        // stage('Run Tests') {
        //     steps {
        //         echo 'Running Tests'
        //         script {
        //             VARIANT = getBuildType()
        //             dir('FrontEnd/MaryFarm/0.01v/MaryFarm'){
        //                 sh '''
        //                     ls -al
        //                     ./gradlew test${VARIANT}UnitTest
        //                 '''
        //             }
        //         }
        //     }
        // }
        // stage('SonarQube analysis') {
        //     steps {
        //         withSonarQubeEnv('sonarqube-server'){
        //             dir('FrontEnd/MaryFarm/0.01v/MaryFarm'){
        //                 sh '''
        //                     gradle init
        //                     ./gradlew sonarqube \
        //                         -Dsonar.projectKey=MaryFarm \
        //                         -Dsonar.host.url=https://sonarqube.ssafy.com \
        //                         -Dsonar.login=55f3f6c57f9b15161782f69d08d77143e2514c8f
        //                 '''
        //             }
        //         }
        //     }
        // }
        stage('Build Bundle') {
            // when { expression { return isDeployCandidate() } }
            steps {
                echo 'Building'
                script {
                    VARIANT = getBuildType()
                    dir('FrontEnd/MaryFarm/0.01v/MaryFarm'){
                        sh '''
                            chmod +x gradlew
                            echo "/usr/lib/android-sdk" >> local.properties
                            ls -al
                            chown -R jenkins:jenkins /var/jenkins_home
                            ./gradlew -PstorePass=${STORE_PASSWORD} -Pkeystore=${KEYSTORE} -Palias=${KEY_ALIAS} -PkeyPass=${KEY_PASSWORD} bundle${VARIANT}
                        '''
                    }
                }
            }
        }
        stage('Deploy App to Store') {
            // when { expression { return isDeployCandidate() } }
            steps {
                echo 'Deploying'
                script {
                    VARIANT = getBuildType()
                    TRACK = getTrackType()

                    if (TRACK == Constants.RELEASE_TRACK) {
                        timeout(time: 5, unit: 'MINUTES') {
                            input "Proceed with deployment to ${TRACK}?"
                        }
                    }

                    try {
                        CHANGELOG = readFile(file: 'CHANGELOG.txt')
                    } catch (err) {
                        echo "Issue reading CHANGELOG.txt file: ${err.localizedMessage}"
                        CHANGELOG = ''
                    }
                    dir('FrontEnd/MaryFarm/0.01v/MaryFarm'){
                        androidApkUpload googleCredentialsId: 'play-store-credentials',
                                filesPattern: "**/outputs/bundle/${VARIANT.toLowerCase()}/*.aab",
                                trackName: TRACK,
                                recentChangeList: [[language: 'en-US', text: CHANGELOG]]
                    }
                }
            }
        }
    }
}